datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Authorizations {
  admin
  user
}

model VerificationToken {
  id            String   @id @default(auto()) @map("_id") @db.ObjectId
  userId        String
  code          String
  token         String   @unique
  expires       DateTime
  lastAttemptAt DateTime @updatedAt
  attempts      Int      @default(0)
  // Useful to change the user email. This model will contains the next user
  // email, waiting for the user to validate it.
  email         String?
}

model User {
  id                String @id @default(auto()) @map("_id") @db.ObjectId
  name              String
  profilePictureKey String @default("")
  email             String @unique

  password String

  authorizations Authorizations[] @default([user])
  isActivated    Boolean          @default(false)
  creationDate   DateTime         @default(now())

  marker           Marker[]          @relation(name: "author")
  likedMarkers     MarkerLike[]
  climbingSessions ClimbingSession[]
}

type Position {
  latitude  Float
  longitude Float
}

model MarkerLike {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  marker    Marker   @relation(fields: [markerId], references: [id], onDelete: Cascade)
  markerId  String   @db.ObjectId

  userId String @db.ObjectId
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([markerId, userId])
  @@index([userId])
}

model Marker {
  id       String   @id @default(auto()) @map("_id") @db.ObjectId
  position Position @unique

  name String

  creationDate DateTime @default(now())
  lastUpdate   DateTime @default(now())

  createdBy   User?  @relation(name: "author", fields: [createdById], references: [id])
  createdById String @db.ObjectId

  likes           MarkerLike[]
  picturesKeys    String[]          @default([])
  ClimbingSession ClimbingSession[]
}

model ClimbingSession {
  id   String @id @default(auto()) @map("_id") @db.ObjectId
  name String

  date      DateTime @default(now())
  numClimbs Int
  duration  Int

  user   User   @relation(fields: [userId], references: [id])
  userId String @db.ObjectId

  spot   Marker? @relation(fields: [spotId], references: [id])
  spotId String? @db.ObjectId
}
